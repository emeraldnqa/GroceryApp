Index: src/main/ui/StockingManagementApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.item.*;\nimport model.list.Section;\nimport model.list.exception.ItemAlreadyThereException;\nimport model.list.exception.ItemNotFoundException;\nimport model.list.exception.WrongTypeException;\n\nimport java.util.List;\nimport java.util.Scanner;\n\nimport static model.list.Section.EXPIRY_DATE;\n\n// A grocery store stocking management app;\npublic class StockingManagementApp {\n    private Section produces;\n    private Section meats;\n    private Section dairies;\n    private Section groceries;\n    private Scanner input;\n\n    //EFFECTS: run the Grocery Stocking Management application\n    protected StockingManagementApp() {\n        runApp();\n    }\n\n    // MODIFIES: this\n    // EFFECTS: processes user input\n    // REFERENCE: The structure for runApp() is inspired by TellerApp, an example provided in CPSC210\n    //            for this project\n    private void runApp() {\n        boolean runningCommand = true;\n        String command = null;\n\n        try {\n            init();\n\n            while (runningCommand) {\n                showMenu();\n                command = input.next();\n                command = command.toLowerCase();\n\n                if (command.equals(\"q\")) {\n                    runningCommand = false;\n                } else {\n                    runCommand(command);\n                }\n\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n\n    }\n\n    // MODIFIES: this\n    // EFFECTS: Initializes different sections in a grocery store.\n    // REFERENCE: The structure for init() is inspired by TellerApp, an example provided in CPSC210\n    //            for this project\n    private void init() {\n        produces = new Section(\"Produce\");\n        meats = new Section(\"Meat\");\n        dairies = new Section(\"Dairy\");\n        groceries = new Section(\"Grocery\");\n        input = new Scanner(System.in);\n        input.useDelimiter(\"\\n\");\n\n\n    }\n\n    // EFFECTS: display options for user\n    // REFERENCE: The structure for showMenu() is inspired by TellerApp, an example provided in CPSC210\n    //            for this project\n    private void showMenu() {\n        System.out.println(\"\\nWelcome to your Grocery Management App. What would you like to do?:\");\n        System.out.println(\"\\ta -> Add new item\");\n        System.out.println(\"\\tr -> Remove item\");\n        System.out.println(\"\\tv -> View item\");\n        System.out.println(\"\\ta/r -> Add or Reduce amount in individual item\");\n        System.out.println(\"\\tq -> Quit\");\n\n    }\n\n    // REQUIRES: command cannot be null.\n    // MODIFIES: this\n    // EFFECTS: running user command\n    // REFERENCE: The structure for showMenu() is inspired by TellerApp, an example provided in CPSC210\n    //            for this project\n    private void runCommand(String command) {\n        switch (command) {\n            case \"a\":\n                addCommand();\n                break;\n            case \"r\": {\n                removeCommand();\n                break;\n            }\n            case \"v\": {\n                getSection();\n                break;\n            }\n            case \"a/r\":\n                addOrReduceAmount();\n                break;\n            default:\n                System.out.println(\"There's no such option\");\n                break;\n        }\n    }\n\n\n    // EFFECTS: Ask user which section they would conduct the action\n    private void sectionMenu() {\n        System.out.println(\"\\nWhich section would you like to conduct the action on?\");\n        System.out.println(\"\\tp -> produce\");\n        System.out.println(\"\\tg -> grocery\");\n        System.out.println(\"\\tm -> meat\");\n        System.out.println(\"\\td -> dairy\");\n    }\n\n    // REQUIRES: items that match the chosen Section\n    // EFFECT: Print out all the items in the Section\n    private void printItem(Section items) {\n        System.out.println(\"Section: \" + items.getType());\n        System.out.println(\"Number of item in section: \" + items.getNumOfItem());\n        List<StoreItem> itemsList = items.getItems();\n        int count = -1;\n        for (StoreItem i : itemsList) {\n            count++;\n            System.out.println(\"\\nNo: \" + count);\n            System.out.println(\"\\tName: \" + i.getName());\n            System.out.println(\"\\tBrand: \" + i.getBrand());\n            System.out.println(\"\\tPrice per unit: \" + i.getPrice() + \"/\" + i.getUnit());\n            System.out.println(\"\\tStock available \" + i.getAmount());\n            if (i.getExpiryDate().equals(EXPIRY_DATE)) {\n                System.out.println(\"Expiry Date: N/A\");\n            } else {\n                System.out.println(\"Expiry Date \" + i.getExpiryDate());\n            }\n        }\n    }\n\n\n    // EFFECT: Find the section that the customer want to print out\n    private Section getSection() {\n        sectionMenu();\n        String chosenSection = input.next();\n        switch (chosenSection) {\n            case \"p\":\n                printItem(produces);\n                return produces;\n            case \"g\":\n                printItem(groceries);\n                return groceries;\n            case \"m\":\n                printItem(meats);\n                return meats;\n            case \"d\":\n                printItem(dairies);\n                return dairies;\n            default:\n                System.out.println(\"Section is not available\");\n                break;\n        }\n        return createNewSection();\n    }\n\n    // MODIFIES: this\n    // EFFECT: create a new section, with user inputting the type of section. If user choose not to\n    //         create a new section, quit the method\n    private Section createNewSection() {\n        System.out.println(\"Would you like to make a new section?(y/n)\");\n        String yesOrNo = input.next();\n        yesOrNo = yesOrNo.toLowerCase();\n        if  (yesOrNo.equals(\"n\")) {\n            System.out.println(\"Please enter the name of the section again: \");\n            getSection();\n        }\n        System.out.println(\"Enter the type of new for your new section: \");\n        String newSection = input.nextLine();\n        return new Section(newSection);\n    }\n\n\n    // MODIFIES: this\n    // EFFECTS: Remove item from chosen section\n    private void removeCommand() {\n        Section chosenSection = getSection();\n        printItem(chosenSection);\n        System.out.println(\"Which item would you like to remove? Enter the item number\");\n        int itemNo = input.nextInt();\n        try {\n            chosenSection.removeItem(itemNo);\n        } catch (ItemNotFoundException e) {\n            System.out.println(\"Item does not available in the section. Please try again\");\n            removeCommand();\n        } catch (IllegalStateException e) {\n            System.out.println(\"No item can be remove since the section is currently empty\");\n        }\n    }\n\n    // MODIFIES: this\n    // EFFECTS: Add an item to chosen section\n    private void addCommand() {\n        Section chosenSection = getSection();\n        System.out.println(\"Please add information about your item\");\n        try {\n            StoreItem newItem = setUpItem(chosenSection);\n            chosenSection.addItem(newItem);\n        } catch (WrongTypeException e) {\n            System.out.println(\"\\nWe currently don't have that section available in store. Please choose again\");\n        } catch (ItemAlreadyThereException e) {\n            System.out.println(\"The Item is already being added. Please try again\");\n            addCommand();\n        }\n    }\n\n    // REQUIRES: type can only be Produce, Grocery, Meat, or Dairy\n    // EFFECT: Create a new Item\n    public StoreItem createItem(String type) throws WrongTypeException {\n        switch (type) {\n            case \"Produce\":\n                return new Produce();\n            case \"Grocery\":\n                return new Grocery();\n            case \"Meat\":\n                return new Meat();\n            case \"Dairy\":\n                return new Dairy();\n            default:\n                throw new WrongTypeException();\n        }\n    }\n\n    // REQUIRES: a valid item in StoreItem\n    // MODIFIES: StoreItem\n    // EFFECT: Enter all the information about the item\n    private StoreItem setUpItem(Section items) throws WrongTypeException {\n        StoreItem item = createItem(items.getType());\n        System.out.println(\"Please add information about your new product below\");\n        System.out.println(\"\\nName: \");\n        String name = input.next();\n        System.out.println(\"\\nBrand: \");\n        String brand = input.next();\n        System.out.println(\"\\nAmount Bought: \");\n        int amount = input.nextInt();\n        System.out.println(\"\\nUnit: \");\n        String unit = input.next();\n        System.out.println(\"\\nBought Price: \");\n        double boughtPrice = input.nextDouble();\n        if (items.getType().equals(\"Produce\") || items.getType().equals(\"Grocery\")) {\n            item.setExpiryDate(9999,12,31);\n            return addItemData(item, name, brand, unit, boughtPrice, amount);\n        }\n        setItemExpiryDate(item);\n        return addItemData(item, name, brand, unit, boughtPrice, amount);\n    }\n\n    // MODIFIES: StoreItem\n    // EFFECT: Set the user input about the item into the StoreItem object\n    private StoreItem addItemData(StoreItem item, String name, String brand, String unit,\n                                 double boughtPrice, int amount) {\n        item.setName(name);\n        item.setBrand(brand);\n        item.setUnit(unit);\n        item.setBoughtPrice(boughtPrice);\n        item.setInitialAmount(amount);\n        return item;\n    }\n\n    // MODIFIES: StoreItem\n    // EFFECT: Set the StoreItem expiryDate according to the item type\n    private void setItemExpiryDate(StoreItem item) {\n        System.out.println(\"Please enter the expiry date of the product\");\n        System.out.println(\"\\nYear: \");\n        int year = input.nextInt();\n        System.out.println(\"\\nMonth: \");\n        int month = input.nextInt();\n        System.out.println(\"\\nDate: \");\n        int date = input.nextInt();\n        item.setExpiryDate(year,month,date);\n    }\n\n    // MODIFIES: Section\n    // EFFECT: User can choose to reduce/add stock amount from an item in the section\n    private void addOrReduceAmount() {\n        System.out.println(\"Which would you like to do? Add amount or reduce? (a/r)\");\n        String action = input.next();\n        Section sectionChosen = getSection();\n        try {\n            if (action.equals(\"a\")) {\n                increaseAmount(sectionChosen);\n            } else if (action.equals(\"r\")) {\n                decreaseAmount(sectionChosen);\n            }\n        } catch (ItemNotFoundException e) {\n            System.out.println(\"Item is not found, please try again\");\n            addOrReduceAmount();\n        }\n    }\n\n    // REQUIRES: sectionChosen can only be the sections that was initialized at the beginning\n    // MODIFIES: StoreItem\n    // EFFECT: increase a certain item stock by their index position, by a certain amount\n    private void increaseAmount(Section sectionChosen) {\n        System.out.println(\"\\nEnter the number of the item that you would like to add: \");\n        int itemNo = input.nextInt();\n        System.out.println(\"\\nEnter the amount that you would like to add to the item: \");\n        int amountIncrease = input.nextInt();\n        try {\n            sectionChosen.addAmount(itemNo,amountIncrease);\n        } catch (IllegalStateException e) {\n            System.out.println(\"The current section is empty\");\n        } catch (ItemNotFoundException e) {\n            System.out.println(\"Item not found, please try again\");\n        }\n\n    }\n\n    // REQUIRES: sectionChosen can only be the sections that was initialized at the beginning\n    // MODIFIES: StoreItem\n    // EFFECT: Decrease a certain item stock by their index position, by a certain amount\n    private void decreaseAmount(Section sectionChosen) throws ItemNotFoundException {\n        System.out.println(\"Enter the number of the item that you would like to remove: \");\n        int itemNo = input.nextInt();\n        System.out.println(\"\\nEnter the amount that you would like to decrease to the item: \");\n        int amountDecrease = input.nextInt();\n        try {\n            sectionChosen.reduceAmount(itemNo, amountDecrease);\n        } catch (IllegalStateException e) {\n            System.out.println(\"The current section is empty\");\n        } catch (ItemNotFoundException e) {\n            System.out.println(\"Item not found, please try again\");\n        }\n\n    }\n\n\n\n\n\n\n\n\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/StockingManagementApp.java b/src/main/ui/StockingManagementApp.java
--- a/src/main/ui/StockingManagementApp.java	(revision b24162c0a986a18e88fdfc33acc3886590f091b4)
+++ b/src/main/ui/StockingManagementApp.java	(date 1677710215455)
@@ -265,7 +265,7 @@
         item.setBrand(brand);
         item.setUnit(unit);
         item.setBoughtPrice(boughtPrice);
-        item.setInitialAmount(amount);
+        item.setAmount(amount);
         return item;
     }
 
@@ -303,13 +303,13 @@
     // REQUIRES: sectionChosen can only be the sections that was initialized at the beginning
     // MODIFIES: StoreItem
     // EFFECT: increase a certain item stock by their index position, by a certain amount
-    private void increaseAmount(Section sectionChosen) {
+    private void increaseAmount(Section section) {
         System.out.println("\nEnter the number of the item that you would like to add: ");
         int itemNo = input.nextInt();
         System.out.println("\nEnter the amount that you would like to add to the item: ");
         int amountIncrease = input.nextInt();
         try {
-            sectionChosen.addAmount(itemNo,amountIncrease);
+            section.addAmount(itemNo,amountIncrease);
         } catch (IllegalStateException e) {
             System.out.println("The current section is empty");
         } catch (ItemNotFoundException e) {
@@ -321,13 +321,13 @@
     // REQUIRES: sectionChosen can only be the sections that was initialized at the beginning
     // MODIFIES: StoreItem
     // EFFECT: Decrease a certain item stock by their index position, by a certain amount
-    private void decreaseAmount(Section sectionChosen) throws ItemNotFoundException {
+    private void decreaseAmount(Section section) throws ItemNotFoundException {
         System.out.println("Enter the number of the item that you would like to remove: ");
         int itemNo = input.nextInt();
         System.out.println("\nEnter the amount that you would like to decrease to the item: ");
         int amountDecrease = input.nextInt();
         try {
-            sectionChosen.reduceAmount(itemNo, amountDecrease);
+            section.reduceAmount(itemNo, amountDecrease);
         } catch (IllegalStateException e) {
             System.out.println("The current section is empty");
         } catch (ItemNotFoundException e) {
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># My Personal Project\n\n## An app that keep track of items in stock of a grocery store\nA stock tracking application for a small grocery store so they can keep track of their stocks efficiently. Every time a\ndelivery for a new item arrive in store, the store manager, or anyone who is in charge of receive the order that time \ninput the item that they received, how many items there are, whether the item is shelf-stable, if the item is not \nshelf-stable, how long the item would last, the item price per single unit sold. The item then is added to a list of\ngrocery items in the grocery store. This project is interesting to me since I'm currently volunteering for the FoodHub \nMarket and one of the challenge that I'm seeing at the market is keeping track of the item in stock at the store, and \ntheir expiry date, while sometimes we can clearly see that items are out of stock, but with multiple items to keep \ntrack, some item get lost in the back of the store, and we don't notice that the item is out of stock until a customer \nask about those item. In addition, keeping track of expiry date of some of these item is also important, it is to \nensure that we don't sell molded or expired product to our customer. Hopefully this app can offset some problems\nthat we face as a small student-run grocery store. \n\n\n- **X is: *GroceryItem*** (with feature: name, brand, price, amount, isShelfStable?, expiryDate, boughtPrice)\n- **Y is *List \\<GroceryItem>***: It could be a variety of list of Grocery Items created as the manager would like with \ndifferent classification such as: Produce, CannedFood, Sauce, Vegetables, Dairy, etc.\n\n## User Stories:\n- As a user, I want to add StoreItem to List\\<StoreItem> that fits their classification,\n- As a user, I want to remove StoreItem to List\\<StoreItem> that fits their classification\n- As a user, I want to view the StoreItems, and their feature in my List\n- As a user, I want to add amount of the same GroceryItem\n- As a user, I want to reduce amount of the same GroceryItem\n- As a user, I want to see the expiry date of my GroceryItem.\n- As a user, I want to see the price to sell the product.\n\n\n  
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision b24162c0a986a18e88fdfc33acc3886590f091b4)
+++ b/README.md	(date 1678124797954)
@@ -19,13 +19,16 @@
 different classification such as: Produce, CannedFood, Sauce, Vegetables, Dairy, etc.
 
 ## User Stories:
-- As a user, I want to add StoreItem to List\<StoreItem> that fits their classification,
+- **As a user, I want to add StoreItem to List\<StoreItem> that fits their classification,**
 - As a user, I want to remove StoreItem to List\<StoreItem> that fits their classification
-- As a user, I want to view the StoreItems, and their feature in my List
-- As a user, I want to add amount of the same GroceryItem
-- As a user, I want to reduce amount of the same GroceryItem
+- **As a user, I want to view the StoreItems, and their feature in my List**
+- **As a user, I want to add amount of the same GroceryItem**
+- **As a user, I want to reduce amount of the same GroceryItem**
 - As a user, I want to see the expiry date of my GroceryItem.
-- As a user, I want to see the price to sell the product.
+- **As a user, I want to see the price to sell the product.**
+- As a user, I want to save all the items that have been added to each section, while using, 
+and before closing the program
+- As a user, I want to have the option of either start out blank, or load the data that I have saved before.
 
 
   
\ No newline at end of file
Index: src/test/model/MyModelTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\n\nimport model.item.*;\nimport model.list.Section;\nimport model.list.exception.ItemAlreadyThereException;\nimport model.list.exception.ItemNotFoundException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass StoreItemTest {\n\n    private StoreItem produceItem;\n    private StoreItem meatItem;\n    private StoreItem dairyItem;\n    private StoreItem groceryItem;\n    private Section produces;\n    private Section meats;\n    private Section dairies;\n    private Section groceries;\n\n    @BeforeEach\n    void runBefore() {\n        produceItem = new Produce();\n        meatItem = new Meat();\n        dairyItem = new Dairy();\n        groceryItem = new Grocery();\n        produces = new Section(\"Produce\");\n        meats = new Section(\"Meat\");\n        dairies = new Section(\"Dairy\");\n        groceries = new Section(\"Grocery\");\n\n    }\n\n    StoreItem setProduceItem() {\n        produceItem.setName(\"Carrots\");\n        produceItem.setInitialAmount(100);\n        produceItem.setUnit(\"kg\");\n        produceItem.setBrand(\"Kirkland\");\n        produceItem.setBoughtPrice(140.45);\n        produceItem.setExpiryDate(+999999999,12,31);\n        return produceItem;\n    }\n\n    StoreItem setMeatItem() {\n        meatItem.setName(\"bacon\");\n        meatItem.setBrand(\"kirkland\");\n        meatItem.setUnit(\"packs\");\n        meatItem.setInitialAmount(50);\n        meatItem.setBoughtPrice(150.50);\n        meatItem.setExpiryDate(2023,12,31);\n        return meatItem;\n    }\n\n    StoreItem setDairyItem() {\n        dairyItem.setName(\"2% Milk\");\n        dairyItem.setBrand(\"Nelson\");\n        dairyItem.setUnit(\"cartons\");\n        dairyItem.setInitialAmount(12);\n        dairyItem.setBoughtPrice(30.0);\n        dairyItem.setExpiryDate(2023,12,31);\n        return dairyItem;\n    }\n\n    StoreItem setGroceryItem() {\n        groceryItem.setName(\"paper towel\");\n        groceryItem.setBrand(\"kirkland\");\n        groceryItem.setUnit(\"packs\");\n        groceryItem.setInitialAmount(12);\n        groceryItem.setBoughtPrice(24.50);\n        groceryItem.setExpiryDate(+999999999,12,31);\n        return groceryItem;\n    }\n\n\n    @Test\n    void testProduceItemGetters() {\n        produceItem = setProduceItem();\n        assertEquals(\"Carrots\",produceItem.getName());\n        assertEquals(\"Kirkland\",produceItem.getBrand());\n        assertEquals(140.45, produceItem.getBoughtPrice());\n        assertEquals(\"kg\",produceItem.getUnit());\n        assertEquals(100,produceItem.getAmount());\n        assertEquals(LocalDate.MAX, produceItem.getExpiryDate());\n\n    }\n\n    @Test\n    void testProduceItemSetPrice() {\n        produceItem = setProduceItem();\n        double price = 140.45 / 100;\n        assertEquals(price, produceItem.getPrice());\n\n    }\n\n\n    @Test\n    void testMeatItemGetters() {\n        meatItem = setMeatItem();\n        assertEquals(\"bacon\",meatItem.getName());\n        assertEquals(\"kirkland\",meatItem.getBrand());\n        assertEquals(\"packs\",meatItem.getUnit());\n        assertEquals(50,meatItem.getAmount());\n        assertEquals(150.50,meatItem.getBoughtPrice());\n        assertEquals(LocalDate.of(2023,12,31),meatItem.getExpiryDate());\n    }\n\n    @Test\n    void testMeatItemSetPrice() {\n        meatItem = setMeatItem();\n        double price = 150.50 / 50;\n        assertEquals(price, meatItem.getPrice());\n    }\n\n\n    @Test\n    void testGroceryItemGetters() {\n        groceryItem = setGroceryItem();\n        assertEquals(\"paper towel\",groceryItem.getName());\n        assertEquals(\"kirkland\",groceryItem.getBrand());\n        assertEquals(\"packs\",groceryItem.getUnit());\n        assertEquals(12,groceryItem.getAmount());\n        assertEquals(24.50,groceryItem.getBoughtPrice());\n        assertEquals(LocalDate.MAX, groceryItem.getExpiryDate());\n    }\n\n    @Test\n    void testGroceryItemGetPrice() {\n        groceryItem = setGroceryItem();\n        double price = 24.50 / 12;\n        assertEquals(price, groceryItem.getPrice());\n    }\n\n    @Test\n    void testDairyItemGetters() {\n        dairyItem = setDairyItem();\n        assertEquals(\"2% Milk\",dairyItem.getName());\n        assertEquals(\"Nelson\",dairyItem.getBrand());\n        assertEquals(\"cartons\",dairyItem.getUnit());\n        assertEquals(12,dairyItem.getAmount());\n        assertEquals(30.0,dairyItem.getBoughtPrice());\n        assertEquals(LocalDate.of(2023,12,31),dairyItem.getExpiryDate());\n    }\n\n    @Test\n    void testDairyItemGetPrice() {\n        dairyItem = setDairyItem();\n        double price = 30.0 / 12;\n        assertEquals(price, dairyItem.getPrice());\n    }\n\n    @Test\n    void testIncreaseStockOnce() {\n        produceItem = setProduceItem();\n        produceItem.increaseStock(10);\n        assertEquals(110,produceItem.getAmount());\n        assertEquals(140.45 / 100, produceItem.getPrice());\n    }\n\n    @Test\n    void testReduceStockOnce() {\n        produceItem = setProduceItem();\n        produceItem.reduceStock(50);\n        assertEquals(50, produceItem.getAmount());\n        assertEquals(140.45 / 100, produceItem.getPrice());\n    }\n\n    @Test\n    void testIncreaseAndDecreaseStockMultiples() {\n        StoreItem newProduceItem = setProduceItem();\n        newProduceItem.increaseStock(50);\n        newProduceItem.reduceStock(10);\n        newProduceItem.reduceStock(100);\n        newProduceItem.increaseStock(200);\n        assertEquals(240, newProduceItem.getAmount());\n        assertEquals(140.45 / 100, newProduceItem.getPrice());\n    }\n\n    @Test\n    void testSectionConstructor() {\n        assertEquals(\"Produce\", produces.getType());\n        assertEquals(\"Meat\", meats.getType());\n        assertEquals(\"Grocery\", groceries.getType());\n        assertEquals(\"Dairy\", dairies.getType());\n    }\n\n    @Test\n    void testGetItems() throws ItemAlreadyThereException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        assertEquals(0,produces.getNumOfItem());\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        List<StoreItem> items = produces.getItems();\n        assertEquals(2,items.size());\n        assertEquals(2,produces.getNumOfItem());\n    }\n\n    @Test\n    void testAddItems() throws ItemAlreadyThereException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        produces.addItem(produceItem);\n        assertThrows(ItemAlreadyThereException.class,\n                () -> produces.addItem(produceItem),\n                \"\");\n        assertEquals(1,produces.getNumOfItem());\n        produces.addItem(meatItem);\n        assertEquals(2,produces.getNumOfItem());\n        StoreItem newItem = new Produce();\n        newItem.setName(\"Carrots\");\n        newItem.setName(\"Other brand\");\n        newItem.setInitialAmount(100);\n        newItem.setUnit(\"kg\");\n        newItem.setBoughtPrice(140.45);\n        newItem.setExpiryDate(+999999999,12,31);\n        produces.addItem(newItem);\n        assertEquals(3,produces.getNumOfItem());\n    }\n\n    @Test\n    void testAddItemsBrandAndPriceNotMatch() throws ItemAlreadyThereException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        assertEquals(2,produces.getNumOfItem());\n        StoreItem newItem = new Produce();\n        newItem.setName(\"Carrots\");\n        newItem.setName(\"Other brand\");\n        newItem.setInitialAmount(100);\n        newItem.setUnit(\"kg\");\n        newItem.setBoughtPrice(200.45);\n        newItem.setExpiryDate(+999999999,12,31);\n        assertEquals(200.45/100,newItem.getPrice());\n        produces.addItem(newItem);\n        assertEquals(3,produces.getNumOfItem());\n    }\n\n    @Test\n    void testAddItemsBrandAndNameMatch() throws ItemAlreadyThereException{\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        assertEquals(2,produces.getNumOfItem());\n        StoreItem newItem = new Produce();\n        newItem.setName(\"Carrots\");\n        newItem.setName(\"Kirkland\");\n        newItem.setInitialAmount(100);\n        newItem.setUnit(\"kg\");\n        newItem.setBoughtPrice(200.45);\n        newItem.setExpiryDate(+999999999,12,31);\n        assertEquals(200.45/100,newItem.getPrice());\n        produces.addItem(newItem);\n        assertEquals(3,produces.getNumOfItem());\n    }\n\n    @Test\n    void testRemoveItems() throws ItemAlreadyThereException, ItemNotFoundException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        produces.removeItem(0);\n        assertEquals(1,produces.getNumOfItem());\n        produces.removeItem(0);\n        assertEquals(0,produces.getNumOfItem());\n        assertThrows(IllegalStateException.class,\n                () -> produces.removeItem(1),\n                \"\");\n    }\n\n    @Test\n    void testRemoveItemMultiple() throws ItemAlreadyThereException, ItemNotFoundException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        groceryItem = setGroceryItem();\n        dairyItem = setDairyItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        produces.addItem(groceryItem);\n        produces.addItem(dairyItem);\n        produces.removeItem(2);\n        assertEquals(3, produces.getNumOfItem());\n        // Test for completely different item and brand\n\n\n\n    }\n\n\n    @Test\n    void testAddAmount() throws ItemNotFoundException, ItemAlreadyThereException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        groceryItem = setGroceryItem();\n        dairyItem = setDairyItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        produces.addItem(groceryItem);\n        produces.addItem(dairyItem);\n        produces.addAmount(1,200);\n        assertEquals(250,meatItem.getAmount());\n        assertThrows(ItemNotFoundException.class,\n                () -> produces.addAmount(5,200),\n                \"\");\n    }\n\n    @Test\n    void testReduceAmount() throws ItemAlreadyThereException, ItemNotFoundException {\n        produceItem = setProduceItem();\n        meatItem = setMeatItem();\n        groceryItem = setGroceryItem();\n        dairyItem = setDairyItem();\n        produces.addItem(produceItem);\n        produces.addItem(meatItem);\n        produces.addItem(groceryItem);\n        produces.addItem(dairyItem);\n        produces.reduceAmount(1,50);\n        assertEquals(0,meatItem.getAmount());\n        assertThrows(ItemNotFoundException.class,\n                () -> produces.reduceAmount(5,200),\n                \"\");\n\n    }\n\n    @Test\n    void testAddAmountEmptySection() {\n        produceItem = setProduceItem();\n        assertThrows(IllegalStateException.class,\n                () -> produces.addAmount(0,100),\n                \"\");\n        assertEquals(0,produces.getNumOfItem());\n    }\n\n    @Test\n    void testReduceAmountEmptySection() {\n        produceItem = setProduceItem();\n        assertThrows(IllegalStateException.class,\n                () -> produces.reduceAmount(0,100),\n                \"\");\n        assertEquals(0,produces.getNumOfItem());\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/model/MyModelTest.java b/src/test/model/MyModelTest.java
--- a/src/test/model/MyModelTest.java	(revision b24162c0a986a18e88fdfc33acc3886590f091b4)
+++ b/src/test/model/MyModelTest.java	(date 1677710443823)
@@ -38,7 +38,7 @@
 
     StoreItem setProduceItem() {
         produceItem.setName("Carrots");
-        produceItem.setInitialAmount(100);
+        produceItem.setAmount(100);
         produceItem.setUnit("kg");
         produceItem.setBrand("Kirkland");
         produceItem.setBoughtPrice(140.45);
@@ -50,7 +50,7 @@
         meatItem.setName("bacon");
         meatItem.setBrand("kirkland");
         meatItem.setUnit("packs");
-        meatItem.setInitialAmount(50);
+        meatItem.setAmount(50);
         meatItem.setBoughtPrice(150.50);
         meatItem.setExpiryDate(2023,12,31);
         return meatItem;
@@ -60,7 +60,7 @@
         dairyItem.setName("2% Milk");
         dairyItem.setBrand("Nelson");
         dairyItem.setUnit("cartons");
-        dairyItem.setInitialAmount(12);
+        dairyItem.setAmount(12);
         dairyItem.setBoughtPrice(30.0);
         dairyItem.setExpiryDate(2023,12,31);
         return dairyItem;
@@ -70,7 +70,7 @@
         groceryItem.setName("paper towel");
         groceryItem.setBrand("kirkland");
         groceryItem.setUnit("packs");
-        groceryItem.setInitialAmount(12);
+        groceryItem.setAmount(12);
         groceryItem.setBoughtPrice(24.50);
         groceryItem.setExpiryDate(+999999999,12,31);
         return groceryItem;
@@ -214,7 +214,7 @@
         StoreItem newItem = new Produce();
         newItem.setName("Carrots");
         newItem.setName("Other brand");
-        newItem.setInitialAmount(100);
+        newItem.setAmount(100);
         newItem.setUnit("kg");
         newItem.setBoughtPrice(140.45);
         newItem.setExpiryDate(+999999999,12,31);
@@ -232,7 +232,7 @@
         StoreItem newItem = new Produce();
         newItem.setName("Carrots");
         newItem.setName("Other brand");
-        newItem.setInitialAmount(100);
+        newItem.setAmount(100);
         newItem.setUnit("kg");
         newItem.setBoughtPrice(200.45);
         newItem.setExpiryDate(+999999999,12,31);
@@ -251,7 +251,7 @@
         StoreItem newItem = new Produce();
         newItem.setName("Carrots");
         newItem.setName("Kirkland");
-        newItem.setInitialAmount(100);
+        newItem.setAmount(100);
         newItem.setUnit("kg");
         newItem.setBoughtPrice(200.45);
         newItem.setExpiryDate(+999999999,12,31);
Index: src/main/model/item/StoreItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.item;\n\nimport java.time.LocalDate;\n\n// Represent a StoreItem having name, brand, price, the amount Bought, in what unit, amount change over tine,\n// and boughtPrice\npublic abstract class StoreItem {\n\n    private String name;\n    private String brand;\n    private double price;\n    private int amount;\n    private static int initialAmount;\n    private double boughtPrice;\n    private String unit;\n\n\n\n    // EFFECTS: Construct a StoreItem, with name, brand, price, the amount Bought, in what unit,\n    // amount change over tine, and boughtPrice. The field has not yet been set\n    public StoreItem() {\n\n    }\n\n    // EFFECTS:\n    public String setName(String name) {\n        return this.name = name;\n    }\n\n    public String setBrand(String brand) {\n        return this.brand = brand;\n    }\n\n    public double setBoughtPrice(double boughtPrice) {\n        return this.boughtPrice = boughtPrice;\n    }\n\n    public int setInitialAmount(int amount) {\n        initialAmount = amount;\n        this.amount = amount;\n        return initialAmount;\n    }\n\n    public String setUnit(String unit) {\n        return this.unit = unit;\n    }\n\n    //EFFECT: return StoreItem name\n    public String getName() {\n        return this.name;\n    }\n\n    //EFFECT: return StoreItem brand\n    public String getBrand() {\n        return this.brand;\n    }\n\n    //EFFECT: return StoreItem price\n    public double getPrice() {\n        return this.price = setPrice();\n    }\n\n    //EFFECT: return StoreItem amount\n    public int getAmount() {\n        return this.amount;\n    }\n\n    //EFFECT: return item bought price:\n    public double getBoughtPrice() {\n        return this.boughtPrice;\n\n    }\n\n    //EFFECT: return item unit\n    public String getUnit() {\n        return this.unit;\n    }\n\n    //REQUIRES: Amount > 0, boughtPrice > 0\n    //MODIFIES: this\n    //EFFECT: set the price of an item price to amount/boughtPrice.\n    private double setPrice() {\n        price = boughtPrice / setInitialAmount(initialAmount);\n        return price;\n    }\n\n    //REQUIRES: 0 < reduceAmount <= initialAmount\n    //MODIFIES: this\n    //EFFECT: Reduce amount in stock by reduceAmount\n    public int reduceStock(int reduceAmount) {\n        this.amount -= reduceAmount;\n        return this.amount;\n    }\n\n    //REQUIRES: 0 < increaseAmount\n    //MODIFIES: this\n    //EFFECT: increase amount in stock by reduceAmount\n    public int increaseStock(int increaseAmount) {\n        this.amount += increaseAmount;\n        return this.amount;\n    }\n\n    // REQUIRES: Year >= 2023 or current year, 0 < Month < 13, 0 < Date < 31\n    // MODIFIES: this\n    // EFFECTS: Return the expiryDate of certain item\n    public abstract LocalDate setExpiryDate(int year, int month, int date);\n\n    public abstract LocalDate getExpiryDate();\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/item/StoreItem.java b/src/main/model/item/StoreItem.java
--- a/src/main/model/item/StoreItem.java	(revision b24162c0a986a18e88fdfc33acc3886590f091b4)
+++ b/src/main/model/item/StoreItem.java	(date 1677712613072)
@@ -35,10 +35,10 @@
         return this.boughtPrice = boughtPrice;
     }
 
-    public int setInitialAmount(int amount) {
-        initialAmount = amount;
+    public int setAmount(int amount) {
         this.amount = amount;
-        return initialAmount;
+        this.initialAmount = amount;
+        return this.amount;
     }
 
     public String setUnit(String unit) {
@@ -80,7 +80,7 @@
     //MODIFIES: this
     //EFFECT: set the price of an item price to amount/boughtPrice.
     private double setPrice() {
-        price = boughtPrice / setInitialAmount(initialAmount);
+        price = boughtPrice / initialAmount;
         return price;
     }
 
