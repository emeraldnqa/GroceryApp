Index: src/main/model/list/Section.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.list;\n\nimport model.item.*;\nimport model.list.exception.ItemAlreadyThereException;\nimport model.list.exception.ItemNotFoundException;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Represent a section in a grocery store. The section has its own type, which adhere to four type that we\n// have: produce, grocery, meat, dairy. Each section will also have numOfItem to represent the number of\n// different product in the section\npublic class Section {\n\n    private String type;\n    private List<StoreItem> items;\n    private int numOfItem;\n    public static final LocalDate EXPIRY_DATE = LocalDate.of(+99999,12, 31);\n\n    // EFFECT: Construct itemList class with an ArrayList, and the list type. Section Type is set in the ui.\n    //         However, the initial section has an empty List<StoreItem>, and the number of item in section is\n    //         set to 0.\n    public Section(String type) {\n        this.type = type;\n        this.items = new ArrayList<>();\n        this.numOfItem = 0;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    // EFFECT: Whenever the function is called, List of StoreItem in the section is returned.\n    public List<StoreItem> getItems() {\n        List<StoreItem> itemsList = new ArrayList<>();\n        for (StoreItem i : items) {\n            itemsList.add(i);\n        }\n        return itemsList;\n    }\n\n    public int getNumOfItem() {\n        return this.numOfItem;\n    }\n\n    // REQUIRES: a valid store item\n    // MODIFIES: this, numOfItem\n    // EFFECT: Add StoreItem into Section. An item cannot be added, if the name, the price, and the brand is the same.\n    //         increase numOfItem in Section by 1.\n    public List<StoreItem> addItem(StoreItem newItem) throws ItemAlreadyThereException {\n        if (items.isEmpty()) {\n            items.add(newItem);\n            this.numOfItem++;\n        } else {\n            for (StoreItem item : items) {\n                if (newItem.getName().equals(item.getName()) && newItem.getBrand().equals(item.getBrand())\n                        && newItem.getPrice() == item.getPrice()) {\n                    throw new ItemAlreadyThereException();\n                } else {\n                    items.add(newItem);\n                    this.numOfItem++;\n                    return items;\n                }\n            }\n        }\n        return items;\n    }\n\n\n    // REQUIRES: name, and brand cannot be null\n    // MODIFIES: this, numOfItem\n    // EFFECT: Remove StoreItem from the Section. An  item cannot be removed if it's not in the list\n    //         Reduce numOfItem by 1.\n    public List<StoreItem> removeItem(String name, String brand) throws ItemNotFoundException {\n        if (items.isEmpty()) {\n            throw new IllegalStateException();\n        }\n        for (StoreItem i : items) {\n            if (i.getName().equals(name) && i.getBrand().equals(brand)) {\n                items.remove(i);\n                this.numOfItem -= 1;\n                return items;\n            } else {\n                throw new ItemNotFoundException();\n            }\n        }\n        return items;\n    }\n\n    // REQUIRES: itemNo >= 0, amountIncrease > 0\n    // MODIFIES: this, StoreItem\n    // EFFECT: Increase an item stock in the section by given amount,\n    //         according to the item index number in the section\n    public void addAmount(int itemNo, int amountIncrease) throws ItemNotFoundException {\n        if (items.isEmpty()) {\n            throw new IllegalStateException();\n        } else {\n            if (itemNo <= getNumOfItem()) {\n                items.get(itemNo).increaseStock(amountIncrease);\n            } else {\n                throw new ItemNotFoundException();\n            }\n        }\n    }\n    // REQUIRES: itemNo >= 0, amountIncrease < item.amount\n    // MODIFIES: this, StoreItem\n    // EFFECT: Decrease an item stock in the section by given amount,\n    //         according to the item index number in the section. The decrease value cannot be larger than initial\n    //         item amount\n    public void reduceAmount(int itemNo, int amountIncrease) throws ItemNotFoundException {\n        if (items.isEmpty()) {\n            throw new IllegalStateException();\n        } else {\n            if (itemNo <= getNumOfItem()) {\n                items.get(itemNo).reduceStock(amountIncrease);\n            } else {\n                throw new ItemNotFoundException();\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/list/Section.java b/src/main/model/list/Section.java
--- a/src/main/model/list/Section.java	
+++ b/src/main/model/list/Section.java	
@@ -103,6 +103,7 @@
             }
         }
     }
+
     // REQUIRES: itemNo >= 0, amountIncrease < item.amount
     // MODIFIES: this, StoreItem
     // EFFECT: Decrease an item stock in the section by given amount,
